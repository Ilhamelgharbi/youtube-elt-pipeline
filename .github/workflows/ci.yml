# ============================================
# üöÄ YouTube ELT Pipeline - CI/CD Workflow
# ============================================
# Automated testing and validation on push/PR
# Runs: Linting, Testing, DAG Validation

name: CI - Tests & Validation

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'dags/**'
      - 'tests/**'
      - 'requirements.txt'
      - 'include/soda/checks/**'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:  # Allow manual trigger

jobs:
  # ==========================================
  # Job 1: Lint Python Code
  # ==========================================
  lint:
    name: üîç Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: üì¶ Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
      
      - name: üîç Run flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 dags/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 dags/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true
      
      - name: üé® Check code formatting with Black
        run: |
          black --check dags/ tests/
        continue-on-error: true

  # ==========================================
  # Job 2: Run Tests with Coverage
  # ==========================================
  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: üß™ Run pytest with coverage
        run: |
          pytest tests/ -v --tb=short --cov=dags --cov-report=term-missing --cov-report=xml --cov-report=html
      
      - name: üìä Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        continue-on-error: true
      
      - name: üìà Coverage Summary
        run: |
          echo "### üìä Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          coverage report --format=markdown >> $GITHUB_STEP_SUMMARY

  # ==========================================
  # Job 3: Validate DAG Files
  # ==========================================
  validate-dags:
    name: ‚úÖ Validate DAGs
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: üì¶ Install Airflow dependencies
        run: |
          python -m pip install --upgrade pip
          pip install apache-airflow==2.10.5
          pip install -r requirements.txt
        env:
          AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
          AIRFLOW__CORE__UNIT_TEST_MODE: 'true'
      
      - name: ‚úÖ Validate DAG syntax
        run: |
          # Set environment variables for Airflow
          export AIRFLOW__CORE__LOAD_EXAMPLES=false
          export AIRFLOW__CORE__UNIT_TEST_MODE=true
          export AIRFLOW_HOME=$PWD/airflow_home
          
          # Create minimal airflow.cfg
          mkdir -p $AIRFLOW_HOME
          
          # Simple Python syntax check for all DAG files
          python << 'EOF'
          import os
          import sys
          import ast
          
          print('üîç Validating DAG files syntax...')
          
          dag_folder = 'dags/'
          dag_files = []
          
          for root, dirs, files in os.walk(dag_folder):
              for file in files:
                  if file.endswith('.py') and not file.startswith('__'):
                      dag_files.append(os.path.join(root, file))
          
          errors = []
          for dag_file in dag_files:
              print(f'  Checking: {dag_file}')
              try:
                  with open(dag_file, 'r', encoding='utf-8') as f:
                      code = f.read()
                      ast.parse(code)
                  print(f'    ‚úÖ Syntax valid')
              except SyntaxError as e:
                  print(f'    ‚ùå Syntax error: {e}')
                  errors.append((dag_file, str(e)))
          
          if errors:
              print('\n‚ùå Syntax errors found:')
              for file, error in errors:
                  print(f'  {file}: {error}')
              sys.exit(1)
          
          print(f'\n‚úÖ All {len(dag_files)} DAG files have valid Python syntax!')
          print('   Files checked:')
          for dag_file in dag_files:
              print(f'   - {dag_file}')
          EOF
        env:
          AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
          AIRFLOW__CORE__UNIT_TEST_MODE: 'true'
      
      - name: üìã DAG Summary
        run: |
          echo "### ‚úÖ DAG Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Validation Type**: Python Syntax Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| DAG File | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| dags/youtube_extract.py | ‚úÖ Valid |" >> $GITHUB_STEP_SUMMARY
          echo "| dags/youtube_load_db.py | ‚úÖ Valid |" >> $GITHUB_STEP_SUMMARY
          echo "| dags/youtube_data_quality.py | ‚úÖ Valid |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note**: Full DAG validation (with imports) happens in local Airflow environment" >> $GITHUB_STEP_SUMMARY

  # ==========================================
  # Job 4: Security Scan
  # ==========================================
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: üì¶ Install safety
        run: |
          python -m pip install --upgrade pip
          pip install safety
      
      - name: üîí Check for security vulnerabilities
        run: |
          pip install -r requirements.txt
          safety check --json || true
        continue-on-error: true

  # ==========================================
  # Job 5: Build Summary
  # ==========================================
  summary:
    name: üìä Build Summary
    runs-on: ubuntu-latest
    needs: [lint, test, validate-dags, security]
    if: always()
    
    steps:
      - name: üìä Generate Summary
        run: |
          echo "# üöÄ YouTube ELT Pipeline - CI Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìã Job Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| DAG Validation | ${{ needs.validate-dags.result == 'success' && '‚úÖ' || '‚ùå' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security.result == 'success' && '‚úÖ' || '‚ö†Ô∏è' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
