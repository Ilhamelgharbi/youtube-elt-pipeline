# ============================================
# 🚀 YouTube ELT Pipeline - CI/CD Workflow
# ============================================
# Automated testing and validation on push/PR
# Runs: Linting, Testing, DAG Validation

name: CI - Tests & Validation

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'dags/**'
      - 'tests/**'
      - 'requirements.txt'
      - 'include/soda/checks/**'
      - '.github/workflows/**'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:  # Allow manual trigger

jobs:
  # ==========================================
  # Job 1: Lint Python Code
  # ==========================================
  lint:
    name: 🔍 Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: 📦 Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
      
      - name: 🔍 Run flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 dags/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 dags/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true
      
      - name: 🎨 Check code formatting with Black
        run: |
          black --check dags/ tests/
        continue-on-error: true

  # ==========================================
  # Job 2: Run Tests with Coverage
  # ==========================================
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: 🧪 Run pytest with coverage
        run: |
          pytest tests/ -v --tb=short --cov=dags --cov-report=term-missing --cov-report=xml --cov-report=html
      
      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        continue-on-error: true
      
      - name: 📈 Coverage Summary
        run: |
          echo "### 📊 Test Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          coverage report --format=markdown >> $GITHUB_STEP_SUMMARY

  # ==========================================
  # Job 3: Validate DAG Files
  # ==========================================
  validate-dags:
    name: ✅ Validate DAGs
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: 📦 Install Airflow dependencies
        run: |
          python -m pip install --upgrade pip
          pip install apache-airflow==2.10.5
          pip install -r requirements.txt
      
      - name: ✅ Validate DAG syntax
        run: |
          python -c "
          import os
          import sys
          from airflow.models import DagBag
          
          print('🔍 Loading DAGs...')
          dag_bag = DagBag(dag_folder='dags/', include_examples=False)
          
          if dag_bag.import_errors:
              print('❌ DAG Import Errors:')
              for filename, error in dag_bag.import_errors.items():
                  print(f'  {filename}: {error}')
              sys.exit(1)
          
          print(f'✅ Successfully loaded {len(dag_bag.dags)} DAGs')
          for dag_id in dag_bag.dag_ids:
              print(f'  - {dag_id}')
          
          # Validate DAG structure
          for dag_id, dag in dag_bag.dags.items():
              print(f'\n🔍 Validating DAG: {dag_id}')
              print(f'  Tasks: {len(dag.tasks)}')
              print(f'  Schedule: {dag.schedule_interval}')
              
              # Check for cycles
              if dag.test_cycle():
                  print(f'  ❌ Cycle detected in {dag_id}')
                  sys.exit(1)
              print(f'  ✅ No cycles detected')
          
          print('\n✅ All DAGs validated successfully!')
          "
      
      - name: 📋 DAG Summary
        run: |
          echo "### ✅ DAG Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| DAG ID | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| youtube_extract | ✅ Valid |" >> $GITHUB_STEP_SUMMARY
          echo "| youtube_load_db | ✅ Valid |" >> $GITHUB_STEP_SUMMARY
          echo "| youtube_data_quality | ✅ Valid |" >> $GITHUB_STEP_SUMMARY

  # ==========================================
  # Job 4: Security Scan
  # ==========================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: 📦 Install safety
        run: |
          python -m pip install --upgrade pip
          pip install safety
      
      - name: 🔒 Check for security vulnerabilities
        run: |
          pip install -r requirements.txt
          safety check --json || true
        continue-on-error: true

  # ==========================================
  # Job 5: Build Summary
  # ==========================================
  summary:
    name: 📊 Build Summary
    runs-on: ubuntu-latest
    needs: [lint, test, validate-dags, security]
    if: always()
    
    steps:
      - name: 📊 Generate Summary
        run: |
          echo "# 🚀 YouTube ELT Pipeline - CI Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Job Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| DAG Validation | ${{ needs.validate-dags.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security.result == 'success' && '✅' || '⚠️' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
